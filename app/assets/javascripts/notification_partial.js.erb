$(document).ready(function() {

    <% if Rails.env.development? %>
      var base_url = "http://localhost:3000/api/v1/notifications/";
    <% else %>
      var base_url = "http://smartparkingsjsu.herokuapp.com/api/v1/notifications/";
    <% end %>

    var url = base_url + gon.garage_id;

    var elementEnum = {
        "solveButton": '<a class="solve-btn waves-effect waves-light btn">Solve</a>\n',
        "checkIcon":  '<i class="small material-icons tooltipped" data-position="top" data-delay="50"\n' +
                      ' data-tooltip="Problem has been solved">check_circle</i>',
        "yesButton": '<a class="waves-effect waves-light btn yes-btn">Yes</a>',
        "noButton" : '<a class="waves-effect waves-light btn no-btn">No</a>'
    };

    var dateHash = {};
    var sortedDateKeys = [];
    var $this;
    var $parent;
    var currentPage = 1;
    var notificationsPerPage = 10;
    var totalPages = 1;

    getNotifications();

    function getNotifications() {
        $.ajax({
            type: 'GET',
            url: url,
            timeout: 2000,
            success: function(data) {
                //console.log("Data", data);
                addNotificationRows(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                //console.log("Error fetching data");
                Materialize.toast("Error fetching data", 6000, 'light-blue lighten-1');
                window.setTimeout(getNotifications, 60000);
            }
        })
    }

    function addNotificationRows(data) {

        if (data.hasOwnProperty("notifications")) {
            var notifications = data.notifications;
        }
        else {
            Materialize.toast("Error fetching data", 6000, 'light-blue lighten-1');
            return -1;
        }

        // Sort dates
        for (var i=0; i<notifications.length; i++) {
            // Get date
            var dateString = notifications[i].created_at.split('T')[0].split('-');
            dateString = dateString[0] + '/' + dateString[1] + '/' + dateString[2];
            var date = new Date(dateString);
            //console.log("Iteration", i, date, dateString);

            // If its the first time inserting to the hash
            if (dateHash[date] == null) {
                // Add key
                sortedDateKeys.push(date);
                dateHash[date] = [];
            }
            dateHash[date].push(notifications[i]);
            //console.log("dateHash", i, dateHash[date]);
        }

        totalPages = Math.ceil(notifications.length/notificationsPerPage);

        //console.log("Total pages", totalPages);

        sortedDateKeys.sort(function(a, b) {return b-a});
        //console.log("Sorted keys", sortedDateKeys);

        // Create page wrappers
        $page = createPageWrappers(totalPages);

        // Append html
        var notificationCount = 0;
        var page = 0;
        for (var i=0; i<sortedDateKeys.length; i++) {
            var thisDate = sortedDateKeys[i];
            addDateBreakLine(thisDate.getMonth()+1 + "/" +
                              thisDate.getDate() + "/" +
                              thisDate.getFullYear(), $page[page]);
            for (var j=0; j<dateHash[thisDate].length; j++) {
                notificationCount++;
                addNotification(dateHash[thisDate][j], $page[page]);
                if ((notificationCount%notificationsPerPage) == 0) {
                    page++;
                }
            }
        }

        // Add page wrappers to notification wrapper
        for (var i=0; i< $page.length; i++) {
            $(".notification-wrapper").append($page[i]);
        }

        addPaginationNumbers(totalPages);

        $('#1-page').show();

        // Activate event listeners
        $('.tooltipped').tooltip({delay: 50});
        addEventHandlers();
    }

    function createPageWrappers(pages) {
        var $page = [];
        for (var i=0; i < pages; i++) {
            $page.push(jQuery('<div id="'+ (i+1) +'-page" class="notification-page"></div>'));
        }
        return $page;
    }

    function addPaginationNumbers(pageNumber) {
        var $paginationNumbers;
        var $pagination = $('.pagination');
        $pagination.append('<li id="pagination-left" class="disabled"><a href="#notifications"><i class="material-icons">chevron_left</i></a></li>')
        for (var i=0; i< pageNumber; i++) {
            if (i==0) {
                $paginationNumbers = '<li class="active pagination-number"><a href="#">1</a></li>'
            }
            else {
                $paginationNumbers += '<li class="waves-effect pagination-number"><a href="#">' + (i+1) + '</a></li>'
            }
        }
        $pagination.append($paginationNumbers);
        $pagination.append('<li id="pagination-right" class="waves-effect"><a href="#notifications"><i class="material-icons">chevron_right</i></a></li>')
    }

    function addNotification(data, $page) {
        var $solveElement = '';

        if (data.read_at) {
            $solveElement = elementEnum.checkIcon;
        }
        else {
            $solveElement = elementEnum.solveButton;
        }

        var $confirmationWrapper =  '<div class="confirmation-wrapper">' +
                                      elementEnum.yesButton +
                                      elementEnum.noButton +
                                    '</div>'

        // TODO: Change confidence to something else
        var $notification = '<div id="' + data.notification_id + '" class="row notification-block valign-wrapper">\n' +
                                '<div class="col s8">\n' +
                                    '<div><span>Problem: ' + data.message + '</span></div>\n' +
                                    '<div><span>Where: ' + data.spot_name + '</span></div>\n' +
                                    '<div><span>Confidence: ' + data.confidence + '</span></div>\n' +
                                '</div>\n' +
                                '<div class="col s4 right-align">\n' +
                                    $solveElement +
                                    $confirmationWrapper +
                                '</div>\n' +
                            '</div>';

        // Add a row
        $page.append($notification);
    }

    function addDateBreakLine(date, $page) {
        var $date = '<div class="row valign-wrapper">\n' +
                      '<div class="col s5"><hr></div>\n' +
                        '<div class="col s2 center-align"><h5>' + date + '</h5></div>\n' +
                      '<div class="col s5"><hr></div>\n' +
                    '</div>'

        // Add date
        $page.append($date);
    }

    function addEventHandlers() {
        $(".solve-btn").click(function() {
            $this = $(this);

            // show confirmation buttons
            $this.hide();
            $this.next().slideDown("slow");
        });

        $(".yes-btn").click(function() {
            $parent = $(this).parent().parent();
            $(this).parent().hide();
            $(this).parent().prev().remove();
            $parent.append(elementEnum.checkIcon).hide().slideDown("slow");

            var id = $parent.parent().attr('id');
            //console.log($parent.parent());
            //console.log(id);

            // Send post request
            $.ajax({
                type: 'POST',
                url: base_url,
                data: {"notification_id": id},
                timeout: 2000,
                success: function() {
                    Materialize.toast("Solved!", 6000, 'light-blue lighten-1');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //console.log("Error fetching data");
                    Materialize.toast("Connection error!", 6000, 'light-blue lighten-1');
                }
            })

            $('.tooltipped').tooltip({delay: 50});
        });

        $(".no-btn").click(function() {
            $(this).parent().hide();
            $(this).parent().prev().show();
        });


        var activePage;
        var prevPage;
        var activeArrowClass = "waves-effect";
        var inactiveArrowClass = "disabled";

        $('.pagination-number').click(function() {
            $this = $(this);
            activePage = $this.text();

            // Update active number
            var activeClass = "active pagination-number";
            var inactiveClass = "waves-effect pagination-number"
            var $active = $this.siblings('.active');
            prevPage = $active.text();

            $active.removeClass(activeClass).addClass(inactiveClass);
            $this.removeClass(inactiveClass).addClass(activeClass);

            // Update arrows
            var $leftArrow = $('#pagination-left');
            var $rightArrow = $('#pagination-right');
            if (activePage == 1) {
                $leftArrow.removeClass(activeArrowClass).addClass(inactiveArrowClass);
            }
            else {
                if ($leftArrow.hasClass("disabled")) {
                    $leftArrow.removeClass(inactiveArrowClass).addClass(activeArrowClass);
                }
            }

            if (activePage == totalPages) {
                $rightArrow.removeClass(activeArrowClass).addClass(inactiveArrowClass);
            }
            else {
                if ($rightArrow.hasClass("disabled")) {
                    $rightArrow.removeClass(inactiveArrowClass).addClass(activeArrowClass);
                }
            }

            // Show page
            if (totalPages != 1) {
                $page[prevPage - 1].hide();
                $page[activePage -1].show();
            }
        });

        $('#pagination-left').click(function() {
            var $this = $(this);
            if (!$this.hasClass("disabled")) {
                if (totalPages != 1) {
                    var $active = $this.siblings('.active');
                    $active.prev().trigger("click");
                }
            }
        });

        $('#pagination-right').click(function() {
            var $this = $(this);
            if (!$this.hasClass("disabled")) {
                if (totalPages != 1) {
                    var $active = $this.siblings('.active');
                    $active.next().trigger("click");
                }
            }
        });
    }
});